#!/usr/bin/env node
'use strict'
const fs = require('fs')
const globule = require('globule')
const path = require('path')
const cp = require('child_process')
const ninjaBuildGen = require('ninja-build-gen')

const version = '1.8.4'

const ninja = ninjaBuildGen('1.5.1', 'build/')
ninja.header(`#generated from ${path.basename(module.filename)}`)

const presets = '--presets es2015-script'
const browserify = `browserify -x $exclude --transform [ babelify ${presets} ]`

//- Rules -

ninja.rule('copy').run('cp $in $out')

ninja.rule('babel').run(`babel ${presets} --source-maps false $in -o $out`)

//browserify and put dependency list in $out.d in makefile format using
//relative paths
ninja
    .rule('browserify')
    .run(
        `${browserify} $in --list > $out.d ` +
            `&& node ./depfileify.js $out $out.d && ${browserify} $in -o $out`
    )
    .depfile('$out.d')
    .description('browserify $in -o $out')

ninja
    .rule('browserify-require')
    .run(
        "browserify --require='./$in' --list > $out.d" +
            "&& node ./depfileify.js $out $out.d && browserify --require='./$in' -o $out"
    )
    .depfile('$out.d')
    .description('browserify $in -o $out')

ninja.rule('sed').run("sed 's$regex' $in > $out")

ninja.rule('remove').run('rm -rf $in')

//- Lists of Files -

const sourceJs = browser =>
    globule.find([`src/${browser}/js/**/*.js`, 'src/common/js/*.js'])

const sourceJson = browser =>
    globule.find([`src/${browser}/data/*.json`, 'src/common/data/*.json'])

const copyFiles = browser =>
    globule.find([
        `src/${browser}/html/*`,
        `src/${browser}/images/*`,
        'src/common/html/*',
        'src/common/images/*'
    ])

//- Edges -

const targets = {chrome: []}

const browserifyEdge = function(target, browser, layer, exclude = '') {
    const edge = ninja
        .edge(target)
        .from(`build/.temp-${browser}/${layer}.js`)
        .assign('exclude', exclude)
        .after(
            sourceJs(browser).map(
                f => `build/.temp-${browser}/${path.basename(f)}`
            )
        )
        .using('browserify')

    if (browser === 'chrome') {
        edge.after(
            sourceJson('chrome').map(
                f => `build/.temp-chrome/data/${path.basename(f)}`
            )
        )
    }

    return targets[browser].push(target)
}
;['main', 'popup', 'options', 'kitspace'].forEach(layer => {
    browserifyEdge(`build/chrome/js/${layer}.js`, 'chrome', layer)
})

for (const browser in targets) {
    sourceJs(browser).forEach(f => {
        const target = `build/.temp-${browser}/${path.basename(f)}`
        ninja
            .edge(target)
            .from(f)
            .using('copy')
    })
}

sourceJson('chrome').forEach(f => {
    const target = `build/.temp-chrome/data/${path.basename(f)}`
    ninja
        .edge(target)
        .from(f)
        .using('copy')
})

const qunitSrc = 'build/.temp-chrome/qunit-1.11.0.js'
ninja
    .edge('build/chrome/js/qunit.js')
    .from(qunitSrc)
    .using('browserify-require')
targets.chrome.push('build/chrome/js/qunit.js')

ninja
    .edge('build/chrome/js/unit.js')
    .from('build/.temp-chrome/unit.js')
    .assign('exclude', qunitSrc)
    .using('browserify')
targets.chrome.push('build/chrome/js/unit.js')

ninja
    .edge('build/chrome/js/functional.js')
    .from('build/.temp-chrome/functional.js')
    .assign('exclude', qunitSrc)
    .using('browserify')
targets.chrome.push('build/chrome/js/functional.js')

copyFiles('chrome').forEach(f => {
    const target = f.replace(/src\/.*?\//, 'build/chrome/')
    ninja
        .edge(target)
        .from(f)
        .using('copy')
    targets.chrome.push(target)
})

for (const browser in targets) {
    const list = targets[browser]
    ninja.edge(browser).from(list)
}

const manifest = 'build/chrome/manifest.json'
ninja
    .edge(manifest)
    .from(manifest.replace('build', 'src'))
    .assign('regex', `/@version/\"${version}\"/`)
    .using('sed')
targets.chrome.push(manifest)

const chrome_package_name = `1clickBOM-v${version}-chrome`
ninja
    .rule('package-chrome')
    .run(
        `cd build/ && cp -r chrome  ${chrome_package_name}` +
            `&& rm -f ${chrome_package_name}/js/functional.js ` +
            `${chrome_package_name}/js/unit.js ${chrome_package_name}/js/qunit.js ` +
            `${chrome_package_name}/html/test.html ${chrome_package_name}/html/qunit-1.11.0.css` +
            `&& cd ${chrome_package_name} && zip -r ../${chrome_package_name}.zip * ` +
            `&& cd .. && rm -rf ${chrome_package_name}`
    )
ninja
    .edge(`${chrome_package_name}.zip`)
    .need('chrome')
    .using('package-chrome')
ninja.edge('package-chrome').need(`${chrome_package_name}.zip`)

ninja.edge('all').from(Object.keys(targets))
ninja.byDefault('all')

ninja
    .edge('clean')
    .from('build/')
    .using('remove')

ninja.save('build.ninja')

console.log('generated build.ninja')
